'''
carrylessAdd
题目描述
众所周知，我们常见的加法规则是类似与 8 + 7 = 15这种，但是现在我们需要设计一种全新的加法运算规则：忽略进位的加法计算。例如输入18和27，答案会是35，而非正常的45。输入两个正整数x1和x2，返回此方法下计算后的结果。

输入格式
两个整型数x1和x2，用逗号隔开。

输出格式
一个整型数。

输入样例
785,376
输出样例
51
提示说明
在本题中在本题中不要使用​字符串索引​、​字符串方法​、​列表​、列表索引或​递归​。我们无法技术上强制约束你使用这些特性，请 自觉遵守学术诚信规定。 助教会检查提交的代码，若 ​不符合本条要求，成绩会被取消​。
'''

import ast
x1, x2 = ast.literal_eval(input())
# 现在程序中有两个变量x1, x2

result = 0
place = 1  # 当前位数，从个位开始

while x1 > 0 or x2 > 0:
    # 取出当前位的数字
    digit1 = x1 % 10
    digit2 = x2 % 10
    
    # 相加并忽略进位
    sum_digits = (digit1 + digit2) % 10
    
    # 将结果添加到正确的位置
    result += sum_digits * place
    
    # 移动到下一位
    x1 = x1 // 10
    x2 = x2 // 10
    place *= 10

print(result)